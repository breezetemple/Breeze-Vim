"相关注释
"pumvisible()：如果弹出框可见，返回非零，否则返回零
"
"GitHub:USER:breezetemple:PASSWD:PHONETAB
"

"Vundle管理vim插件
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'
Bundle 'Tagbar'
Bundle 'vim-scripts/c.vim'
Bundle 'ctags.vim'
Bundle 'cscope.vim'
Bundle 'autoload_cscope.vim'
Bundle 'Mark'
Bundle 'L9'
Bundle 'FuzzyFinder'
Bundle 'junegunn/vim-easy-align'        
Bundle 'Lokaltog/vim-easymotion'        
Bundle 'Lokaltog/vim-powerline'         
Bundle 'vim-scripts/bufexplorer.zip'    
Bundle 'vim-scripts/EasyGrep'           
Bundle 'kien/ctrlp.vim'                 
Bundle 'tpope/vim-surround'             
Bundle 'Raimondi/delimitMate'           
Bundle 'terryma/vim-multiple-cursors'   
Bundle 'myusuf3/numbers.vim'            
let g:enable_numbers = 0
Bundle 'Valloric/YouCompleteMe'

Bundle 'nsf/gocode'
Bundle 'fatih/vim-go'
Bundle 'dgryski/vim-godef'

""""""""""""""""""""""""""""""
" OLD
""""""""""""""""""""""""""""""
"Bundle 'taglist.vim'
"Bundle 'grep.vim'
"Bundle 'winmanager'
"
"Bundle 'tsaleh/vim-align'
"Bundle 'Align.vim'
"Bundle 'Tabular'
"Bundle 'Easy-alignment-to-column'
"
"Bundle 'vim-scripts/TabBar'
"Bundle 'vim-scripts/minibufexplorerpp'
"
"Bundle 'nathanaelkane/vim-indent-guides'
"let g:indent_guides_guide_size = 1
"Bundle 'The-NERD-tree'
"Bundle 'tpope/vim-commentary'
"Bundle 'magic-dot-files/TagHighlight'
"
"Bundle 'vim-scripts/DoxygenToolkit.vim'
"Bundle 'vim-scripts/OmniCppComplete'
"Bundle 'Shougo/neocomplcache.vim'
"Bundle 'Rip-Rip/clang_complete'
"Bundle 'SirVer/ultisnips'
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" NEW
""""""""""""""""""""""""""""""
"Bundle 'scrooloose/syntastic'
"
"Bundle 'ervandew/supertab'
"set cpt=k,b,. " cpt = 'complete' 实现就近补全功能
"
"filetype plugin indent on
filetype plugin on



""""""""""""""""""""""""""""""
" TEST
""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""

set number      "显示行号
set ignorecase     "搜索时忽略大小写 --noignorecase
set incsearch       "在搜索时，输入的词句逐字符高亮
set hlsearch        "高亮搜索词 --nohlsearch
set nocompatible    "是否兼容VI模式 --compatible 兼容模式，tab不会变为空格
set nowrap      "折行设置 --nowrap
set nolinebreak     "折行设置 --nolinebreak
set nobackup        ""不备份
set showcmd
set showfulltag
set autoindent

" 以下四行参数请不要修改
set shiftwidth=4
set tabstop=4
set softtabstop=4
set shiftround
set expandtab

"" 显示tab和空格
"set list
"" 设置tab和空格样式
"set lcs=tab:\|\ ,nbsp:%,trail:-
"" 设定行首tab为灰色
"highlight LeaderTab ctermfg=2
"" 匹配行首tab
"match LeaderTab /^\t/


"语法高亮
syntax enable
syntax on
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 显示相关    
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set cul "高亮当前行
"set cuc
"autocmd InsertEnter * se cul " 用浅色高亮当前行
set shortmess=atI   " 启动的时候不显示那个援助乌干达儿童的提示

"配色表选择
set t_Co=256
colorscheme 256-jungle
"colorscheme yanwzh
"solarized BlackSea ansi_blows putty greens colorful256 ansi_blows vividchalk adrian colorer darkzen elflord

"设置vim默认编码，兼容汉字国标
set fencs=utf-8,cp936               "设定默认解码
set fileencodings=utf-8,gb2312,gbk,gb18030  "从磁盘读取文件的时候，通过此设置完成自动识别编码
set termencoding=utf-8              "用于屏幕显示的编码方式
set encoding=utf-8              "vim内部使用的字符编码方式 --通常为utf-8 修改为prc是为解决中文乱码




""""""""""""""""""""""""""""""
" UltiSnips
""""""""""""""""""""""""""""""
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<c-b>"
"let g:UltiSnipsJumpBackwardTrigger="<c-z>"

""""""""""""""""""""""""""""""
" YouCompleteMe
""""""""""""""""""""""""""""""
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
set completeopt=menu,menuone  "default: menu,preview ->open scratch window -> vim setting
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0 "关闭加载提示
let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 基于标签引擎
let g:ycm_min_num_of_chars_for_completion=2 " 从第2个键入字符就开始罗列匹配项
let g:ycm_cache_omnifunc=0  " 禁止缓存匹配项,每次都重新生成匹配项
let g:ycm_seed_identifiers_with_syntax=1    " 语法关键字补全
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1 "在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 0 "注释和字符串中的文字也会被收入补全

let g:ycm_show_diagnostics_ui = 0 "打开代码检测
let g:ycm_error_symbol = '>>'

"let g:ycm_server_use_vim_stdout = 1
"let g:ycm_server_log_level = 'debug'

let g:ycm_semantic_triggers = {}
let g:ycm_semantic_triggers.c = ['->','.','','(','[','&']


""""""""""""""""""""""""""""""
" CRTL-P
""""""""""""""""""""""""""""""
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'


""""""""""""""""""""""""""""""
" VIM-MULTIPLE-CURSORS
""""""""""""""""""""""""""""""
" Default mapping
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'



""""""""""""""""""""""""""""""
" TAGBAR
""""""""""""""""""""""""""""""
"定义tagbar相关设置
nmap <S-F9> :TagbarToggle<CR>
let g:tagbar_left = 1
let g:tagbar_width = 35
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
    \ 'i:imports:1',
    \ 'c:constants',
    \ 'v:variables',
    \ 't:types',
    \ 'n:interfaces',
    \ 'w:fields',
    \ 'e:embedded',
    \ 'm:methods',
    \ 'r:constructor',
    \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

""""""""""""""""""""""""""""""
" BUFEXPLORER SETTING
""""""""""""""""""""""""""""""
"noremap \\ :BufExplorer<CR>
noremap <silent> <F10> :BufExplorer<CR>

""""""""""""""""""""""""""""""
" MARK SETTING
""""""""""""""""""""""""""""""
map <F2> :marks<CR>
nmap ff <Plug>MarkSet
vmap ff <Plug>MarkSet
nmap mm <Plug>MarkClear
vmap mm <Plug>MarkClear
nmap mn <Plug>MarkRegex
vmap mn <Plug>MarkRegex


""""""""""""""""""""""""""""""
" EASY_ALIGN
""""""""""""""""""""""""""""""
vmap <Enter> <Plug>(EasyAlign)


""""""""""""""""""""""""""""""
" EASY_MOTION
""""""""""""""""""""""""""""""
"let g:EasyMotion_mapping_f = '_f'
"let g:EasyMotion_mapping_F = '_F'
"let g:EasyMotion_mapping_t = '_t'
"let g:EasyMotion_mapping_T = '_T'
"let g:EasyMotion_mapping_w = '_w'
"let g:EasyMotion_mapping_W = '_W'
"let g:EasyMotion_mapping_e = '_e'
"let g:EasyMotion_mapping_E = '_E'
"let g:EasyMotion_mapping_j = '_j'
"let g:EasyMotion_mapping_k = '_k'


""""""""""""""""""""""""""""""
" QUICKFIX
""""""""""""""""""""""""""""""
"quickfix按键映射表
nmap <F8> :cn<cr>                   
nmap <F7> :cp<cr>               

"nmap <leader>co :QFix<CR>
"nmap <leader>ct :call QFixToggle(1)<CR>
nmap <silent><F12> :call QFixToggle(1)<CR>
command! -bang -nargs=? QFix call QFixToggle(<bang>0)

function! QFixToggle(forced)
    if exists("g:qfix_win") && a:forced != 0
        cclose
    else
        if exists("g:my_quickfix_win_height")
            execute "copen ".g:my_quickfix_win_height
        else
            copen
        endif
    endif
endfunction

augroup QFixToggle
    autocmd!
    autocmd BufWinEnter quickfix let g:qfix_win = bufnr("$")
    autocmd BufWinLeave * if exists("g:qfix_win") && expand("<abuf>") == g:qfix_win | unlet! g:qfix_win | endif
augroup END



""""""""""""""""""""""""""""""
" POWERLINE
""""""""""""""""""""""""""""""
""总是显示状态栏
set laststatus=2
let g:Powerline_symbols = 'unicode'
"let g:Powerline_symbols = 'compatible'
""状态栏属性
"highlight StatusLine cterm=bold ctermfg=black ctermbg=green
"" 获取当前路径，将$HOME转化为~
"function! CurDir()
"  let curdir = substitute(getcwd(), $HOME, "~", "g")
"   return curdir
"endfunction
""set statusline=[%n]\ %f%m%r%h\ \|\ \ pwd:\ %{CurDir()}\ \ \|%=\|\ %l,%c\ %p%%\ \|\ ascii=%b,hex=%b%{((&fenc==\"\")?\"\":\"\ \|\ \".&fenc)}\ \|\ %{$USER}\ @\ %{hostname()}\
""set statusline=%F%m%r,%Y,%{&fileformat}\ \ \ASCII=\%b,HEX=\%B\ \ \ %l,%c%V\ %p%%\ \ \ [\ %L\ lines\ in\ all\]
""set statusline=[%n]\ %f%m%r%h\ \|\ pwd:\ %{CurDir()}\ \\|%=\|\ %l,%c\ %p%%\ \|\ ASCII=\%b,HEX=\%B\ \|
"set statusline=\ %{CurDir()}\/%f\ \ \|%=\|\ %l,%c\ %p%%\\|\ ASCII=\%b,HEX=\%B\ \|

""""""""""""""""""""""""""""""
" Surround Command
"""""""""""""""""""""""""""""""
"    Normal mode
"    -----------
"    ds  - delete a surrounding
"    cs  - change a surrounding
"    ys  - add a surrounding
"    yS  - add a surrounding and place the surrounded text on a new line + indent it
"    yss - add a surrounding to the whole line
"    ySs - add a surrounding to the whole line, place it on a new line + indent it
"    ySS - same as ySs
"
"    Visual mode
"    -----------
"    s   - in visual mode, add a surrounding
"    S   - in visual mode, add a surrounding but place text on new line + indent it
"
"    Insert mode
"    -----------
"    <CTRL-s> - in insert mode, add a surrounding
"    <CTRL-s><CTRL-s> - in insert mode, add a new line + surrounding + indent
"    <CTRL-g>s - same as <CTRL-s>
"    <CTRL-g>S - same as <CTRL-s><CTRL-s>


""""""""""""""""""""""""""""""
" FUZZYFINDER
""""""""""""""""""""""""""""""
"FuzzyFinder配置
let g:fuf_modesDisable = []
let g:fuf_mrufile_maxItem = 400
let g:fuf_mrucmd_maxItem = 400
nnoremap <silent> sj     :FufBuffer<CR>
nnoremap <silent> sk     :FufFileWithCurrentBufferDir<CR>
nnoremap <silent> sK     :FufFileWithFullCwd<CR>
nnoremap <silent> s<C-k> :FufFile<CR>
nnoremap <silent> sl     :FufCoverageFile<CR>
nnoremap <silent> sL     :FufCoverageFileChange<CR>
nnoremap <silent> s<C-l> :FufCoverageFileRegister<CR>
nnoremap <silent> sd     :FufDirWithCurrentBufferDir<CR>
nnoremap <silent> sD     :FufDirWithFullCwd<CR>
nnoremap <silent> s<C-d> :FufDir<CR>
nnoremap <silent> sn     :FufMruFile<CR>
nnoremap <silent> sN     :FufMruFileInCwd<CR>
nnoremap <silent> sm     :FufMruCmd<CR>
nnoremap <silent> su     :FufBookmarkFile<CR>
nnoremap <silent> s<C-u> :FufBookmarkFileAdd<CR>
vnoremap <silent> s<C-u> :FufBookmarkFileAddAsSelectedText<CR>
nnoremap <silent> si     :FufBookmarkDir<CR>
nnoremap <silent> s<C-i> :FufBookmarkDirAdd<CR>
nnoremap <silent> st     :FufTag<CR>
nnoremap <silent> sT     :FufTag!<CR>
nnoremap <silent> s<C-]> :FufTagWithCursorWord!<CR>
nnoremap <silent> s,     :FufBufferTag<CR>
nnoremap <silent> s<     :FufBufferTag!<CR>
vnoremap <silent> s,     :FufBufferTagWithSelectedText!<CR>
vnoremap <silent> s<     :FufBufferTagWithSelectedText<CR>
nnoremap <silent> s}     :FufBufferTagWithCursorWord!<CR>
nnoremap <silent> s.     :FufBufferTagAll<CR>
nnoremap <silent> s>     :FufBufferTagAll!<CR>
vnoremap <silent> s.     :FufBufferTagAllWithSelectedText!<CR>
vnoremap <silent> s>     :FufBufferTagAllWithSelectedText<CR>
nnoremap <silent> s]     :FufBufferTagAllWithCursorWord!<CR>
nnoremap <silent> sg     :FufTaggedFile<CR>
nnoremap <silent> sG     :FufTaggedFile!<CR>
nnoremap <silent> so     :FufJumpList<CR>
nnoremap <silent> sp     :FufChangeList<CR>
nnoremap <silent> sq     :FufQuickfix<CR>
nnoremap <silent> sy     :FufLine<CR>
nnoremap <silent> sh     :FufHelp<CR>
nnoremap <silent> se     :FufEditDataFile<CR>
nnoremap <silent> sr     :FufRenewCache<CR>
"
" F4和shift+F4调用FuzzyFinder命令行菜单""{{{
"
function! GetAllCommands()
  redir => commands
  silent command
  redir END
  return map((split(commands, "\n")[3:]),
      \      '":" . matchstr(v:val, ''^....\zs\S*'')')
endfunction

" 自定义命令行
let g:fuf_com_list=[':exe "FufBuffer                       " |" sj     ',
                   \':exe "FufFileWithCurrentBufferDir     " |" sk     ',
                   \':exe "FufFileWithFullCwd              " |" sK     ',
                   \':exe "FufFile                         " |" s<C-k> ',
                   \':exe "FufCoverageFile                 " |" sl     ',
                   \':exe "FufCoverageFileChange           " |" sL     ',
                   \':exe "FufCoverageFileRegister         " |" s<C-l> ',
                   \':exe "FufDirWithCurrentBufferDir      " |" sd     ',
                   \':exe "FufDirWithFullCwd               " |" sD     ',
                   \':exe "FufDir                          " |" s<C-d> ',
                   \':exe "FufMruFile                      " |" sn     ',
                   \':exe "FufMruFileInCwd                 " |" sN     ',
                   \':exe "FufMruCmd                       " |" sm     ',
                   \':exe "FufBookmarkFile                 " |" su     ',
                   \':exe "FufBookmarkFileAdd              " |" s<C-u> ',
                   \':exe "FufBookmarkFileAddAsSelectedText" |" s<C-u> ',
                   \':exe "FufBookmarkDir                  " |" si     ',
                   \':exe "FufBookmarkDirAdd               " |" s<C-i> ',
                   \':exe "FufTag                          " |" st     ',
                   \':exe "FufTag!                         " |" sT     ',
                   \':exe "FufTagWithCursorWord!           " |" s<C-]> ',
                   \':exe "FufBufferTag                    " |" s,     ',
                   \':exe "FufBufferTag!                   " |" s<     ',
                   \':exe "FufBufferTagWithSelectedText!   " |" s,     ',
                   \':exe "FufBufferTagWithSelectedText    " |" s<     ',
                   \':exe "FufBufferTagWithCursorWord!     " |" s}     ',
                   \':exe "FufBufferTagAll                 " |" s.     ',
                   \':exe "FufBufferTagAll!                " |" s>     ',
                   \':exe "FufBufferTagAllWithSelectedText!" |" s.     ',
                   \':exe "FufBufferTagAllWithSelectedText " |" s>     ',
                   \':exe "FufBufferTagAllWithCursorWord!  " |" s]     ',
                   \':exe "FufTaggedFile                   " |" sg     ',
                   \':exe "FufTaggedFile!                  " |" sG     ',
                   \':exe "FufJumpList                     " |" so     ',
                   \':exe "FufChangeList                   " |" sp     ',
                   \':exe "FufQuickfix                     " |" sq     ',
                   \':exe "FufLine                         " |" sy     ',
                   \':exe "FufHelp                         " |" sh     ',
                   \':exe "FufEditDataFile                 " |" se     ',
                   \':exe "FufRenewCache                   " |" sr     ',
                   \':exe "FufDir ~/"                        |" 更换目录从家目录jml',
                   \':exe "FufFile ~/"                       |" 打开文件从家目录jml',
                   \]


nnoremap <silent> <S-F11> :call fuf#givencmd#launch('', 0, '选择命令>', GetAllCommands())<CR>
nnoremap <silent> <F11> :call fuf#givencmd#launch('', 0, '选择命令>', g:fuf_com_list)<CR>

""""""""""""""""""""""""""""""
" Autoload_Cscope 添加cscope位置
""""""""""""""""""""""""""""""
"cscope add cscope.out ./
"cscope add /home/yanwzh/workspace/drivers/v1.9/gxbus/cscope.out /home/yanwzh/workspace/drivers/v1.9/gxbus
"Audo add cscope by autoloadcscope
let g:autocscope_menus=0 "关闭autocscope插件的快捷健映射.防止和我们定义的快捷键冲突.

""""""""""""""""""""""""""""""
" CSCOPE
""""""""""""""""""""""""""""""
set cscopequickfix=s-,c-,d-,i-,t-,e-
nmap <F4> :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <F5> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <F6> :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <F3> :!ctags -R --c-kinds=+lx --fields=+laS --extra=+q  $PWD /home/yanwzh/workspace/drivers/v1.9/gxbus <CR><CR>:!cscope -Rbkq<CR>
nmap <F3><F3> :!ctags -R --c++-kinds=+plx --fields=+iaS --extra=+q . /home/yanwzh/workspace/drivers/v1.9/gxbus <CR><CR>:!cscope -Rbkq<CR>


"添加tags位置
"set autochdir "自动切换目录，会导致FuzzyFinder失败 如果打开使用sk代替sl搜索文件 同时ctags生成时需要使用绝对路径
set tags=tags; "自动查找 这个分号是不能省略
"Sample
"set tags+=/home/yanwzh/workspace/goxceed/git-driver/v1.9-Beta3-2013-02-26/demod/tags
"ctags -R /home/boddy/hello/ ctags /usr/include/* /usr/include/bits/*
" 
"
"
"映射F12为更新tags cscope快捷按键
"For C++
"nmap <f12> <esc>:call Go_top()<cr>:!ctags -R --c++-kinds=+p --fields=+iaS
""\ --extra=+q $PWD<cr>:call Do_CsTag()<cr>:!nametags.sh<cr><cr>:call Go_curr()<cr>
"imap <f12> <esc>:call Go_top()<cr>:!ctags -R --c++-kinds=+p --fields=+iaS
""\ --extra=+q $PWD<cr>:call Do_CsTag()<cr>:!nametags.sh<cr><cr>:call Go_curr()<cr>
"nmap <a-f12> <esc>:!ctags -R --fields=+lS $PWD<cr><cr>
""\:!cscope -Rbkq<cr><cr>:!nametags.sh<cr><cr>
"imap <a-f12> <esc>:!ctags -R --fields=+lS $PWD<cr><cr>
""\:!cscope -Rbkq<cr><cr>:!nametags.sh<cr><cr>

"For C
"nmap <f12> <esc>:call Go_top()<cr>:!ctags -R --fields=+lS $PWD<cr><cr>
"            \:!cscope -Rbkq<cr><cr>:!nametags.sh<cr><cr>:call Go_curr()<cr>
"imap <f12> <esc>:call Go_top()<cr>:!ctags -R --fields=+lS $PWD<cr><cr>
"            \:!cscope -Rbkq<cr><cr>:!nametags.sh<cr><cr>:call Go_curr()<cr>
"
"func! Go_top()
"    　　wall
"    　　let g:Curr_dir=getcwd()
"    　　let i = 1
"    　　while i < 10
"    　　　　if filereadable("TOP")
"    　　　　　　return
"    　　　　else
"    　　　　　　cd ..
"    　　　　　let i += 1
"    　　　　endif
"    　　endwhile
"    　　exec 'cd'.g:Curr_dir
"
"endfunc
"
"func! Go_curr()
"    　　exec 'cd'.g:Curr_dir
"endfunc
"
"func! Do_CsTag()
"    　　silent! exec "!find . -name '*.h' -o -name '*.c' -o -name '*.cpp'
"    　　\ -o -name 'Makefile' -o -name 'makefile' -o -name 'make*'
"    　　\ -o -name '*.cc' -o -name '*.C'-o -name '*.s'-o -name '*.S'>cscope.files"
"    　　silent! exec"!cscope -Rbkq -i cscope.files"
"    　　silent! exec"!cscope -Rbkq"
"endfunc


""""""""""""""""""""""""""""""
" Go Lang need GoImports
""""""""""""""""""""""""""""""
"autocmd BufWritePre *.go :Fmt
